1. CREAMOS LA BD

  CREATE DATABASE bbdd_primeraapp;
  USE bbdd_primeraapp;
  SHOW TABLES FROM bbdd_primeraapp;
  DESCRIBE tbl_personas;
  SET SQL_SAFE_UPDATES = 0;
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
2. CONFIGURAMOS EL PROPERTIES

  #configuraciondes de la BD
  spring.datasource.url=jdbc:mysql://localhost:3306/bbdd_primeraapp
  spring.datasource.username=root
  spring.datasource.password=root
  spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
  
  #configuraciondes de JPA
  #create-drop | update
  spring.jpa.hibernate.ddl-auto=update
  spring.jpa.show-sql=true
  
  #Dialecto
  spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
3. CREAMOS EL MODELO (ENTIDADES)

3.1 usar la anotacion @Entity para mapear la entidad a una tabla de la BD
  3.2 anotaciones importantes:
    3.2.1 @Table --> especifica el nombre con el que se mapeara la tabla con el atributo name
    3.2.2 @Id --> marca atributo como PK
    3.2.3 @GeneratedValue --> especifica que la PK sera una estrategia con auto incremento
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
4. CREAMOS EL REPOSITORIO
  4.1 Siempre debe ser una Interface que debe extender de la clase JpaRepository que debe tener la clase model y el tipo de identificador del Id
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
5. CREAMOS EL SERVICIO

  5.1 siempre sera Interface con los metodos necesarios (los CRUDS en este caso)
    5.1.1 Un metodo obtener todos que sera una Lista del model sin argumentos
    5.1.2 Un metodo de obtener por algun identificador que sera instanciada de la clase del modelo
    5.1.3 Un metodo de modificar que sera instanciado del modelo y como parametros tendremos el identificador y el objeto
    5.1.4 Un metodo que no retorna que es para eliminar que tiene un idntificador
    5.1.5 Un metodo simple sin parametros para contar los registros (OPCIONAL)

  5.2 creamos en un paquete "imp" una clase que implementara la Interface con sus metodos, esta clase proporcionará la lógica de negocio real.
    5.2.1 Primero inyectamos nuestro Repository con @Autowired 
    5.2.2 Para el obtener todos simplemente usamos el nombre de nuestra inyeccion y usamos el metodo findAll definida en la clase que extiende nuestro Reposiory 
    5.2.3 Para obtener por id usamos el mismo procedimeinto pero con el metodo findById y tambien debemos usar el metodo orElse que devolvera un null si no encuentra el objeto
    5.2.4 Para agregar simplemente usamos el metodo save
    5.2.5 Para modifica creamos una instancia del Modelo y en vez de crear el objeto (por asi decirlo) se realiza la busqueda por id
        5.2.5.1 Luego mediante condicion preguntamos si existe (diferente de null)
        5.2.5.1 Con al instancia seteamos el atributo y obtenemos el nuevo valor, hacer para cada campo
        5.2.5.1 Retorna la inyeccion de dependencia y con el mismo metodo de guardar guardamos la instancia creada para este proceso 
        5.2.6 Retornamos null si el objeto no existia
        5.2.6 Para el eliminar usamos el metodo deleteById
        5.2.7 (OPCIONAL- ES DEL CONTAR) usamos el metodo count
  5.3 anotamos la clase implementada con @Service para posteriormente ser inyectada en el Controller y para que Spring la reconozca como un componente de servicio y la gestione.
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------------->

6. CREAMOS EL CONTROLLER

  6.1 Marca el controller con la anotacion @Controller  maneja solicutudes HTTP
  6.2 (OPCIONAL) @RequestMapping (/personas) --> Asiga una URL raiz 
  6.3 Inyectamos el servicio

  6.4 Para los metodos CRUD
    6.4.1 Obtener Todos
      6.4.1.1 Usamos la anotacion @GetMapping--> asgina un metodo del controlador a un endpoint GET
      6.4.1.2 Creamos un metodo con parametros de la clase Model que se usa para tarnsferir objetos del controller a la vista
      6.4.1.3 Creamos una lista de nuestro modelo y usaremos el nombre asignado a nuestra inyeccion para invocar el metodo de Obtener Todo de nuestro Service 
      6.4.1.4 Usamos model.addAttribute (key, valor), para agregar los atributos del modelo a la vista
      6.4.1.5 (OPCIONAL) impriminos  con un System el metodo contar usandolo desde nuestra inyeccion 
      6.4.1.5 Retornmaos el nombre del archivo de la vista (el HTML)
      6.4.1.6 Vamos a la vista dentro de resources/templates
        6.4.2.6.1 En la tabla, en la fila (TR) usamos la expresion th:each="persona:${personasLista}" para recorrer nuestra lista -->objeto, key del model
        6.4.2.6.2 En cada celda (TD) usamos la expresion th:text="${persona.id}" --> objeto del foreach y el atributo del model, repetimos para cada campo
      
    6.4.2 Agregar
      6.4.2.1 Creamos un nuevo endpoint (/nuevaPersona) para una nueva vista que usaremos para aregar una persona
      6.4.2.2 Usamos el model.addAttribute creando el key y creamos la instancia del objeto
      6.4.2.3 Reeptimos pero como parametros un key (acciones) y como valor el end point que nos llevara a la vista para agregar (/personas/nuevaPersona) 
      6.4.2.4 Retornamos el html para crear

      6.4.2.4 Creamos un metodo @PostMapping que apuntara a "/nuevaPersona" 
        6.4.2.4.1 En el metodo usamos la anotacion @ModelAttribute --> Permite obtener los datos del formulario gracias al th:field de la vista,  mapeandolos al objeto
        6.4.2.4.2 Con la inyeccion llamamos al metodo crear del servicio y le pasamos el objeto
        6.4.2.4.3 Retornamos con redirect a la vista anterior (/personas) 
    
      6.4.2.5 En la vista de crear
        6.4.2.5.1 Con la expresion th:action="${accion}" --> se especifica la URL destino a la que se enviara este formulario
        6.4.2.5.2 Con el method="post" --> para indicar que vamos a enviar datos con el metodo post
        6.4.2.5.3 Con al expresion th:object="${persona}" --> es el key del objeto, se especifica el objeto que se trabajara como modelo para el formulario
        6.4.2.5.4 En los inputs usamos la expresion th:field="*{nombre}" --> para acceder a los valores del objeto y asignarle lo que se escriba en el input (repetimos para todos los campos)

    6.4.3 Modificar

    6.4.3.1 En el Controller:
      6.4.3.1.1 Creamos un metodo con la anotacion @GetMapping con el endpoint editar y le pasamos el id (/{id}) para diferenciarlo del formulario de crear
      6.4.3.1.2 Usamos como parametros la anotacion @PathVariable con un atributo id para pasarselo a la URL, la instancia del objeto y el Model 
      6.4.3.1.3 Usamos el model.addAttribute co nuestro modelo
	  6.4.3.1.4 Repetimos el paso ateriro pero con la url del action (/personas/editar/" + id)
	  6.4.3.1.4 Retornamos el formulario para crear/editar
	  6.4.3.1.5 Creamos el metodo Post donde se actualizara el registro
				no usamos PutMapping porque eso es para servicios Rest pero eso es otro tema
				no guardaremos como un uevo registro si no como uno ya existente
	  6.4.3.1.3 Le pasamos @ModelAttribute con la instancia del modelo para obtener los datos del formulario editar
      6.4.3.1.4 Usamos la inyeccion usando el metodo editar

    6.4.3.2 En la Vista
      6.4.3.2 En la vista princioal (listar) le vamos a pasar la ruta para ir al formulario editar --> <a th:href="@{/personas/editar/{id}(id=${persona.id})}">
      6.4.3.2 En la vista del formulario editar colocamos un campo oculto de Id -->  <input type="hidden" th:field="*{id}">
      
    6.4.4 Eliminar
      6.4.4.1 En el Controller:
        6.4.4.1.1 Creamos un metodo con @GetMapping conel end point eliminar con su id
        6.4.4.1.2 Usamos @PathVariable con el id para pasarlo como parametro a la URL
        6.4.4.1.3 Con la inyeccion invocamos el meotod eliminar
		6.4.4.1.4 Retornamos con redirect la vista principal
	
      6.4.4.2 En la vista:
		6.4.4.2.1 En al vsiata agregamos la URL de eliminar al boton <a th:href="@{/personas/eliminar/{id}(id=${persona.id})}"> 
<---------------------------------------------------------------------------------------------------------------------------------------------------------------------------->
