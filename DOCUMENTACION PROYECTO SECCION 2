1. CREAMOS LA BD

2. CONFIGURAMOS EL PROPERTIES

3. CREAMOS EL MODELO (ENTIDADES)
  3.1 usar la anotacion @Entity para mapear la entidad a una tabla de la BD
  3.2 anotaciones importantes:
    3.2.1 @Table --> especifica el nombre con el que se mapeara la tabla con el atributo name
    3.2.2 @Id --> marca atributo como PK
    3.2.3 @GeneratedValue --> especifica que la PK sera una estrategia con auto incremento

4. CREAMOS EL REPOSITORIO
  4.1 Siempre debe ser una Interface que debe extender de la clase JpaRepository que debe tener la clase model y el tipo de identificador del Id

5. CREAMOS EL SERVICIO
  5.1 siempre sera Interface con los metodos necesarios (los CRUDS en este caso)

    5.1.1 Un metodo obtener todos que sera una Lista del model sin argumentos
    5.1.2 Un metodo de obtener por algun identificador que sera instanciada de la clase del modelo
    5.1.3 Un metodo de modificar que sera instanciado del modelo y como parametros tendremos el identificador y el objeto
    5.1.4 Un metodo que no retorna que es para eliminar que tiene un idntificador
    5.1.5 Un metodo simple sin parametros para contar los registros (OPCIONAL)
    
  5.2 creamos en un paquete "imp" una clase que implementara la Interface con sus metodos, esta clase proporcionará la lógica de negocio real.

  5.2.1 Primero inyectamos nuestro Repository con @Autowired 
  5.2.2 Para el obtener todos simplemente usamos el nombre de nuestra inyeccion y usamos el metodo findAll definida en la clase que extiende nuestro Reposiory 
  5.2.3 Para obtener por id usamos el mismo procedimeinto pero con el metodo findById y tambien debemos usar el metodo orElse que devolvera un null si no encuentra el objeto
  5.2.4 Para agregar simplemente usamos el metodo save
  5.2.5 Para modifica creamos una instancia del Modelo y en vez de crear el objeto (por asi decirlo) se realiza la busqueda por id
        5.2.5.1 Luego mediante condicion preguntamos si existe (diferente de null)
        5.2.5.1 Con al instancia seteamos el atributo y obtenemos el nuevo valor, hacer para cada campo
        5.2.5.1 Retorna la inyeccion de dependencia y con el mismo metodo de guardar guardamos la instancia creada para este proceso 
        5.2.6 Retornamos null si el objeto no existia
 5.2.6 Para el eliminar usamos el metodo deleteById
 5.2.7 (OPCIONAL- ES DEL CONTAR) usamos el metodo count

  5.3 anotamos la clase implementada con @Service para posteriormente ser inyectada en el Controller
      y para que Spring la reconozca como un componente de servicio y la gestione.

6. CREAMOS EL CONTROLLER





